{"version":3,"sources":["Canvas.js","Header.js","App.js","reportWebVitals.js","index.js"],"names":["Canvas","props","state","canvas","React","createRef","data","map","line","paths","point","Math","floor","round","x","y","processedData","console","log","fetch","method","headers","body","JSON","stringify","then","res","json","setState","class","ref","this","strokeWidth","strokeColor","width","height","onClick","current","exportPaths","cleaned","preProcess","postPicData","catch","e","guess","resetCanvas","Component","Header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAiFeA,E,kDA5Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,MAAQ,CACN,MAAS,MAJT,EAAKC,OAASC,IAAMC,YAFH,E,8CASnB,SAAWC,GAET,OADcA,EAAKC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,MAAMF,KAAI,SAAAG,GAAK,MAAI,CAACC,KAAKC,MAAMD,KAAKE,MAAgB,IAAVH,EAAMI,GAAY,KAAMH,KAAKC,MAAMD,KAAKE,MAAgB,IAAVH,EAAMK,GAAW,c,yBAIhJ,SAAYC,GAAgB,IAAD,OACzBC,QAAQC,IAAIF,GACZG,MAAM,yDAA0D,CAC9DC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUR,KAEtBS,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAK,SAAAC,GACJT,QAAQC,IAAI,aAAcQ,GAC1B,EAAKE,SAAS,CAAC,MAASF,S,oBAI5B,WAAU,IAAD,OACP,OACE,sBAAKG,MAAM,wBAAX,UACE,qBAAKA,MAAM,aAAX,SACE,cAAC,IAAD,CAEEC,IAAKC,KAAK5B,OACV6B,YAAa,EACbC,YAAY,QACZC,MAAM,OACNC,OAAO,WAGX,wBAAQN,MAAM,qCACZO,QAAS,WACP,EAAKjC,OAAOkC,QACTC,cACAb,MAAK,SAAAnB,GACJW,QAAQC,IAAIZ,EAAK,GAAGG,OACpB,IAAI8B,EAAU,EAAKC,WAAWlC,GAC9B,EAAKmC,YAAYF,MAElBG,OAAM,SAAAC,GACL1B,QAAQC,IAAIyB,OAVpB,oBAiBCZ,KAAK7B,MAAM0C,OACZ,gCACA,wBAAQf,MAAM,yCACdO,QAAU,WACR,EAAKjC,OAAOkC,QAAQQ,cACpB,EAAK3C,MAAM0C,MAAQ,MAHrB,mBAQE,oBAAGf,MAAM,UAAT,mCAA0CE,KAAK7B,MAAM0C,MAArD,iB,GArEWxC,IAAM0C,WCWZC,E,4JAVb,WACE,OACE,gCACE,kDACE,2H,GANWD,aCWNE,MATf,WACE,OACE,sBAAKnB,MAAM,GAAX,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCGSoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.00584ef4.chunk.js","sourcesContent":["import React from \"react\";\nimport { ReactSketchCanvas } from \"react-sketch-canvas\";\n \n \nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  state = {\n    \"guess\": null,\n  }\n\n  preProcess(data){\n    let cleaned = data.map( line => line.paths.map(point => [Math.floor(Math.round(point.x * 100 ) / 100), Math.floor(Math.round(point.y * 100) / 100)] ))\n    return cleaned\n  }\n\n  postPicData(processedData) {\n    console.log(processedData)\n    fetch(\"https://draw-search-api.herokuapp.com/process/process/\", {\n      method: \"POST\",\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify(processedData)\n    })\n    .then( res => res.json())\n    .then(res => {\n      console.log(\"response: \", res)\n      this.setState({'guess': res})\n    })\n  }\n \n  render() {\n    return (\n      <div class=\"center-within colored\">\n        <div class=\"top-margin\">\n          <ReactSketchCanvas\n            \n            ref={this.canvas}\n            strokeWidth={5}\n            strokeColor=\"black\"\n            width=\"99px\"\n            height=\"99px\"\n          />\n         </div>\n        <button class=\"btn-small waves-effect waves-light\" \n          onClick={() => {\n            this.canvas.current\n              .exportPaths()\n              .then(data => {\n                console.log(data[0].paths);\n                let cleaned = this.preProcess(data)\n                this.postPicData(cleaned)\n              })\n              .catch(e => {\n                console.log(e);\n              });\n          }}\n        >\n      \n          Search\n        </button>\n        {this.state.guess && \n        <div>\n        <button class=\"btn-small waves-effect waves-light red\" \n        onClick= {() => {\n          this.canvas.current.resetCanvas()\n          this.state.guess = null\n        }}>\n        \n          Clear\n        </button>\n          <p class=\"message\">You probably drew an \"{this.state.guess}\"</p>\n        </div>\n        }\n      </div>\n    );\n  }\n};\n\nexport default Canvas","import {Component} from 'react'\n\n\nclass Header extends Component {\n\n  render() {\n    return(\n      <div >\n        <h3>Graphical Search</h3>\n          <h5>Draw an \"X\" or an \"O\" with your mouse, and I will try to guess which one you drew:</h5>\n      </div>\n    )\n  }\n}\n\nexport default Header","import './App.css';\nimport Canvas from './Canvas'\nimport Header from './Header'\n\n\nfunction App() {\n  return (\n    <div class=\"\">\n      <Header />\n      <Canvas />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}